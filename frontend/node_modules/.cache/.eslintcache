[{"/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/index.js":"1","/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/App.js":"2","/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/Home.js":"3","/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/Profile.js":"4","/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/Channel.js":"5","/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/Dm.js":"6"},{"size":145,"mtime":1626552340231,"results":"7","hashOfConfig":"8"},{"size":2572,"mtime":1626723961948,"results":"9","hashOfConfig":"8"},{"size":13425,"mtime":1626748302141,"results":"10","hashOfConfig":"8"},{"size":1392,"mtime":1626588401248,"results":"11","hashOfConfig":"8"},{"size":375,"mtime":1626717350533,"results":"12","hashOfConfig":"8"},{"size":3368,"mtime":1626758123119,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"fu7bx6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/index.js",[],["29","30","31","32"],"/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/App.js",[],"/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/Home.js",["33","34","35"],"import React, {useEffect} from 'react';\nimport Profile from './Profile.js';\nimport Channel from './Channel.js';\nimport Dm from './Dm.js';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport ForumOutlinedIcon from '@material-ui/icons/ForumOutlined';\nimport AlternateEmailIcon from '@material-ui/icons/AlternateEmail';\nimport SearchIcon from '@material-ui/icons/Search';\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\nimport ArrowDropDownCircleIcon from '@material-ui/icons/ArrowDropDownCircle';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\nimport ArrowBackOutlinedIcon from '@material-ui/icons/ArrowBackOutlined';\nimport AccountCircleOutlinedIcon from\n  '@material-ui/icons/AccountCircleOutlined';\nimport './Home.css';\n\n/**\n* @param {Object} props - Props from parent\n* @return {JSX} - Home Page for Application\n*/\nfunction Home(props) {\n  const username = props.username;\n  const [sideName, setSideName] = React.useState('');\n  const [workspaces, setWorkspaces] = React.useState([]);\n  const [workspace, setWorkspace] = React.useState('');\n  const [workspaceDisplay, setWorkspaceDisplay] = React.useState('none');\n  const [channelDisplay, setChannelDisplay] = React.useState('none');\n  const [channelChosen, setChannelChosen] = React.useState('none');\n  const [dmChosen, setDMChosen] = React.useState('none');\n  const [channelName, setChannelName] = React.useState('');\n  const [dmName, setDMName] = React.useState('');\n  const [directDisplay, setDirectDisplay] = React.useState('none');\n  const [messageDisplay, setMessageDisplay] = React.useState('none');\n  const [atDisplay, setAtDisplay] = React.useState('none');\n  const [searchDisplay, setSearchDisplay] = React.useState('none');\n  const [profileDisplay, setProfileDisplay] = React.useState('none');\n  const [currChannels, setCurrChannels] = React.useState([]);\n  const [addedChannel, setAddedChannel] = React.useState('');\n  const [addedDM, setAddedDM] = React.useState('');\n  const [currDMs, setCurrDMs] = React.useState([]);\n  const [addChannelBox, setAddChannelBox] = React.useState('none');\n  const [addDMBox, setAddDMBox] = React.useState('none');\n  useEffect(() => {\n    fetch('http://localhost:3010/v0/workspace')\n      .then(async (res) => {\n        const arrayWork = [];\n        if (res.status === 200) {\n          const foundWorkspaces = await res.json();\n          for (let i = 0; i < foundWorkspaces.length; i++) {\n            const workspacename = foundWorkspaces[i].workspacename;\n            if (workspacename !== workspace) {\n              arrayWork.push(createWorkspaces(workspacename));\n            }\n          }\n          setWorkspaces(arrayWork);\n        }\n      },\n      )\n      .catch((err) => err);\n  }, [workspace]);\n  useEffect(() => {\n    if (workspace) {\n      const first = 'http://localhost:3010/v0/';\n      fetch(first + `channel?Workspace=${workspace}`)\n        .then(async (res) => {\n          const array = [];\n          if (res.status === 200) {\n            const channels = await res.json();\n            for (let i = 0; i < channels.length; i++) {\n              const name = channels[i].channelname;\n              array.push(createChannel(name));\n            }\n          }\n          setCurrChannels(array);\n        },\n        )\n        .catch((err) => err);\n    }\n  }, [workspace]);\n  useEffect(() => {\n    if (username && workspace) {\n      setCurrDMs([]);\n      const first = 'http://localhost:3010/v0/';\n      fetch(first + `dms?user=${username}&workspace=${workspace}`)\n        .then(async (res) => {\n          if (res.status === 200) {\n            const users = await res.json();\n            for (let i = 0; i < users.length; i++) {\n              fetchFullName(users[i]);\n            }\n          }\n        },\n        )\n        .catch((err) => err);\n    }\n  }, [workspace, username]);\n  useEffect(() => {\n    if (workspace) {\n      fetch('http://localhost:3010/v0/name', {\n        method: 'PUT',\n        body: JSON.stringify({\n          user: username,\n          workspace: workspace,\n        }),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => res.json())\n        .catch((err) => err);\n    }\n  }, [workspace]);\n  useEffect(()=>{\n    if (username) {\n      const first = 'http://localhost:3010/v0/';\n      fetch(first + `name?user=${username}`)\n        .then(async (res) => {\n          const userData = await res.json();\n          setWorkspace(userData.workspace);\n        },\n        )\n        .catch((err) => err);\n    }\n  }, [username]);\n  /**\n  * @param {String} user - Username for user\n  */\n  function fetchFullName(user) {\n    let fullName;\n    const first = 'http://localhost:3010/v0/';\n    fetch(first + `name?user=${user}`)\n      .then(async (res) => {\n        const userData = await res.json();\n        fullName = userData.firstName + ' ' + userData.lastName;\n        const addedDM = createDM(fullName, user);\n        setCurrDMs((array) => [...array, addedDM]);\n      },\n      )\n      .catch((err) => err);\n  }\n  /**\n  * @param {String} string - Name of workspace\n  * @return {JSX} - Workspace for Page\n  */\n  function createWorkspaces(string) {\n    return (\n      <div id='workspace' onClick={()=>setWorkspace(string)}>\n        <ChevronRightIcon id='workspace-arrow' fontSize='medium'/>\n        {string}\n      </div>\n    );\n  }\n  /**\n  * @param {String} name - Name of Channel to Open\n  */\n  function openChannel(name) {\n    setChannelChosen('block');\n    setChannelName(name);\n  }\n  /**\n  * @param {String} fullName - Full name of Side Username\n  * @param {String} side - Name of Side Username\n  */\n  function openDM(fullName, side) {\n    setDMChosen('block');\n    setDMName(fullName);\n    setSideName(side);\n  }\n  /**\n  * @param {String} name - Name of Channel\n  * @return {JSX} - Channels for Page\n  */\n  function createChannel(name) {\n    return (\n      <div id='channel'\n        onClick={()=>openChannel(name)}>\n        <ChevronRightIcon id='hash' fontSize='small'/>\n        {name}\n      </div>\n    );\n  }\n  /**\n  * @param {String} name - Name of Channel to Add\n  */\n  function addChannel(name) {\n    fetch('http://localhost:3010/v0/channel', {\n      method: 'POST',\n      body: JSON.stringify({\n        curWorkspace: workspace,\n        channelName: name,\n      }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .catch((err) => err);\n    const addedChannel = createChannel(name);\n    setCurrChannels((array) => [...array, addedChannel]);\n  }\n  /**\n  * @param {String} user - Name of user to Add\n  */\n  function addDM(user) {\n    const first = 'http://localhost:3010/v0/';\n    fetch(first + `name?user=${user}`)\n      .then(async (res) => {\n        const userData = await res.json();\n        if (res.status !== 200 || user === username) {\n          alert('Cannot Locate User!');\n          return;\n        } else {\n          const dmName = userData.firstName + ' ' + userData.lastName;\n          fetch('http://localhost:3010/v0/dms', {\n            method: 'POST',\n            body: JSON.stringify({\n              userone: username,\n              workspace: workspace,\n              usertwo: user,\n            }),\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n            },\n          })\n            .then((res) => res.json())\n            .catch((err) => err);\n          const addedDM = createDM(dmName, user);\n          setCurrDMs((array) => [...array, addedDM]);\n        }\n      })\n      .catch((err) => alert('Cannot Locate User!'));\n  }\n  /**\n  */\n  function closeChannel() {\n    channelDisplay === 'block' ? setChannelDisplay('none') :\n      setChannelDisplay('block');\n    if (addChannelBox === 'block') {\n      setAddChannelBox('none');\n    }\n  }\n  /**\n  */\n  function closeDM() {\n    directDisplay === 'block' ? setDirectDisplay('none') :\n      setDirectDisplay('block');\n    if (addDMBox === 'block') {\n      setAddDMBox('none');\n    }\n  }\n  /**\n  * @param {String} name - Full name of user\n  * @param {String} side - Name of receiving user\n  * @return {Array} - Direct Messages for Page\n  */\n  function createDM(name, side) {\n    return (\n      <div id='dm'\n        onClick={()=>openDM(name, side)}>\n        <AccountCircleOutlinedIcon id='hash' fontSize='small'/>\n        {name}\n      </div>\n    );\n  }\n  /**\n  */\n  function closeAll() {\n    setMessageDisplay('none');\n    setAtDisplay('none');\n    setSearchDisplay('none');\n    setProfileDisplay('none');\n    setDMChosen('none');\n    setChannelChosen('none');\n    setDirectDisplay('none');\n    setChannelDisplay('none');\n    setAddDMBox('none');\n    setAddChannelBox('none');\n  }\n  /**\n  * @return {Array} - Direct Messages for Page\n  */\n  function generateHeader() {\n    return (\n      <div id='special-header'>\n        <ArrowBackOutlinedIcon onClick={()=>closeAll()} id='special-arrow'/>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <div id='chosen-channel' style={{display: channelChosen}}>\n        {generateHeader()}\n        <Channel name={channelName}/>\n      </div>\n      <div id='chosen-channel' style={{display: dmChosen}}>\n        {generateHeader()}\n        <Dm workspace={workspace} name={dmName}\n          main={username} side={sideName}/>\n      </div>\n      <div style={{display: messageDisplay}}>\n        {generateHeader()}\n      </div>\n      <div style={{display: atDisplay}}>\n        {generateHeader()}\n      </div>\n      <div style={{display: searchDisplay}}>\n        {generateHeader()}\n      </div>\n      <div style={{display: profileDisplay}}>\n        {generateHeader()}\n        <Profile username={username}/>\n      </div>\n      <div id='header'>\n        {workspace}\n        <ArrowDropDownCircleIcon id='header-arrow'\n          onClick={()=> {\n            closeAll();\n            workspaceDisplay === 'block' ?\n              setWorkspaceDisplay('none') : setWorkspaceDisplay('block');\n          }}/>\n      </div>\n      <div id='workspace-body' style={{display: workspaceDisplay}}>\n        {workspaces}\n      </div>\n      <div id='channel-body'>\n        <div id='body-header'>\n          <ArrowDropDownCircleIcon id='body-arrow' fontSize='small'\n            onClick={()=>closeChannel()}/>\n          Channels\n        </div>\n        <div style={{display: channelDisplay}}>\n          {currChannels}\n          <div id='channel'>\n            <AddBoxOutlinedIcon id='hash' fontSize='small'\n              onClick={()=>addChannelBox === 'none' ?\n                setAddChannelBox('block') : setAddChannelBox('none')}/>\n            Add Channel\n          </div>\n        </div>\n        <div id='body-header'>\n          <ArrowDropDownCircleIcon id='body-arrow' fontSize='small'\n            onClick={()=> closeDM()}/>\n          Direct Messages\n        </div>\n        <div style={{display: directDisplay}}>\n          {currDMs}\n          <div id='dm'>\n            <AddBoxOutlinedIcon id='hash' fontSize='small'\n              onClick={()=>addDMBox === 'none' ?\n                setAddDMBox('block') : setAddDMBox('none')}/>\n            Add Teammate\n          </div>\n        </div>\n        <div id='channel-adder' style={{display: addChannelBox}}>\n          <input\n            id='add-channel'\n            type='text'\n            onInput={(event)=>setAddedChannel(event.target.value)}\n            value={addedChannel}\n            placeholder='Add Channel'\n          />\n        </div>\n        <div id='channel-adder' style={{display: addDMBox}}>\n          <input\n            id='add-channel'\n            type='text'\n            onInput={(event)=>setAddedDM(event.target.value)}\n            value={addedDM}\n            placeholder='Add Direct Message With User'\n          />\n        </div>\n        <button id='channel-button' style={{display: addChannelBox}}\n          onClick={()=>addChannel(addedChannel)}>\n          Add\n        </button>\n        <button id='dm-button' style={{display: addDMBox}}\n          onClick={()=>addDM(addedDM)}>\n          Add\n        </button>\n      </div>\n      <BottomNavigation id='navigation'>\n        <BottomNavigationAction icon={<HomeOutlinedIcon/>}\n          onClick={()=>closeAll()}/>\n        <BottomNavigationAction icon={<ForumOutlinedIcon/>}\n          onClick={()=> {\n            closeAll();\n            messageDisplay === 'block' ?\n              setMessageDisplay('none') : setMessageDisplay('block');\n          }}/>\n        <BottomNavigationAction icon={<AlternateEmailIcon/>}\n          onClick={()=> {\n            closeAll();\n            atDisplay === 'block' ?\n              setAtDisplay('none') : setAtDisplay('block');\n          }}/>\n        <BottomNavigationAction icon={<SearchIcon/>}\n          onClick={()=> {\n            closeAll();\n            searchDisplay === 'block' ?\n              setSearchDisplay('none') : setSearchDisplay('block');\n          }}/>\n        <BottomNavigationAction icon={<PermIdentityIcon/>}\n          onClick={()=> {\n            closeAll();\n            profileDisplay === 'block' ?\n              setProfileDisplay('none') : setProfileDisplay('block');\n          }}/>\n      </BottomNavigation>\n    </div>\n  );\n}\n\nexport default Home;\n","/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/Profile.js",[],"/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/Channel.js",[],"/Users/keatonsinger/Desktop/cse-183-final-project/frontend/src/Dm.js",["36","37"],"import React, {useEffect} from 'react';\nimport './Dm.css';\n\n/**\n* @param {Object} props - Channel Name\n* @return {JSX} - Channel Page\n*/\nfunction Dm(props) {\n  const [addedDM, setAddedDM] = React.useState('');\n  const [fullName, setFullName] = React.useState('');\n  const [currMessages, setCurrMessages] = React.useState([]);\n  useEffect(() => {\n    if (props.main) {\n      fetchFullName();\n    }\n  }, [props.main]);\n  useEffect(() => {\n    if (props.side) {\n      const second = `&workspace=${props.workspace}&userSecond=${props.side}`;\n      fetch(`http://localhost:3010/v0/dmMessages?user=${props.main}` + second)\n        .then(async (res) => {\n          const messageArray = [];\n          if (res.status === 200) {\n            const foundMessages = await res.json();\n            for (let i = 0; i < foundMessages.length; i++) {\n              const message = foundMessages[i];\n              const sentMessages = message.sentmessages;\n              if (Object.keys(sentMessages).length !== 0) {\n                messageArray.push(createMessage(message));\n              }\n            }\n            setCurrMessages(messageArray);\n          }\n        },\n        )\n        .catch((err) => err);\n    }\n  }, [props.workspace, props.side]);\n  /**\n  * @param {String} user - Username for user\n  */\n  function fetchFullName(user) {\n    const first = 'http://localhost:3010/v0/';\n    fetch(first + `name?user=${props.main}`)\n      .then(async (res) => {\n        const userData = await res.json();\n        const fullNameTemp = userData.firstName + ' ' + userData.lastName;\n        setFullName(fullNameTemp);\n      },\n      )\n      .catch((err) => err);\n  }\n  /**\n  * @param {String} newMessage - Message to Add\n  */\n  function addDM(newMessage) {\n    setAddedDM('');\n    const body = {\n      userOne: props.main,\n      workspace: props.workspace,\n      userTwo: props.side,\n      sentMessages: {\n        sent: props.main,\n        received: props.side,\n        time: (new Date().toISOString().split('.')[0] +'Z'),\n        message: newMessage,\n      }};\n    fetch('http://localhost:3010/v0/dmMessages', {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .catch((err) => err);\n    const newDM = createMessage(body);\n    setCurrMessages((array) => [...array, newDM]);\n  }\n  /**\n  * @param {JSON} object - Message Object with Information\n  * @return {JSX} - JSX for Message\n  */\n  function createMessage(object) {\n    let message;\n    if (object.sentMessages) {\n      message = object.sentMessages.message;\n    } else {\n      message = object.sentmessages.message;\n    }\n    return (\n      <div id='message'>{fullName}{message}</div>\n    );\n  }\n  return (\n    <div>\n      <div id='dm-head'>\n        <div id='dm-type'>\n          {props.name}\n        </div>\n      </div>\n      <div id='dm-main'>\n        {currMessages}\n        <div id='dm-adder'>\n          <input\n            id='add-dm'\n            type='text'\n            onInput={(event)=>setAddedDM(event.target.value)}\n            value={addedDM}\n            placeholder='Send Message'\n          />\n        </div>\n        <button id='dm-button'\n          onClick={()=>addDM(addedDM)}>\n          Send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Dm;\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":82,"column":6,"nodeType":"48","endLine":82,"endColumn":17,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":99,"column":6,"nodeType":"48","endLine":99,"endColumn":27,"suggestions":"51"},{"ruleId":"46","severity":1,"message":"52","line":116,"column":6,"nodeType":"48","endLine":116,"endColumn":17,"suggestions":"53"},{"ruleId":"46","severity":1,"message":"50","line":16,"column":6,"nodeType":"48","endLine":16,"endColumn":18,"suggestions":"54"},{"ruleId":"46","severity":1,"message":"55","line":38,"column":6,"nodeType":"48","endLine":38,"endColumn":35,"suggestions":"56"},"valid-jsdoc",[],"require-jsdoc",[],"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createChannel'. Either include it or remove the dependency array.","ArrayExpression",["59"],"React Hook useEffect has a missing dependency: 'fetchFullName'. Either include it or remove the dependency array.",["60"],"React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["61"],["62"],"React Hook useEffect has missing dependencies: 'createMessage' and 'props.main'. Either include them or remove the dependency array.",["63"],"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [createChannel, workspace]",{"range":"74","text":"75"},"Update the dependencies array to be: [workspace, username, fetchFullName]",{"range":"76","text":"77"},"Update the dependencies array to be: [username, workspace]",{"range":"78","text":"79"},"Update the dependencies array to be: [fetchFullName, props.main]",{"range":"80","text":"81"},"Update the dependencies array to be: [props.workspace, props.side, props.main, createMessage]",{"range":"82","text":"83"},[3530,3541],"[createChannel, workspace]",[4026,4047],"[workspace, username, fetchFullName]",[4463,4474],"[username, workspace]",[402,414],"[fetchFullName, props.main]",[1203,1232],"[props.workspace, props.side, props.main, createMessage]"]